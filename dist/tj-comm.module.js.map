{"version":3,"file":"tj-comm.module.js","sources":["../node_modules/nanoid/index.prod.js","../src/model/sandbox-event.ts","../src/model/sandbox-event-dispatcher.ts","../src/model/sandbox-event-promise.ts","../src/api/chrome/windows/windows.ts","../src/api/chrome/chrome.ts","../src/api/api.ts","../src/index.ts"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nif (false) {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { customAlphabet } from 'nanoid';\n\n/**\n *  Event that is sent across the sandbox event bus,\n *  it can be exchanged with the sandbox page\n * \n * @class SandboxEvent\n */\nexport default class SandboxEvent {\n    STRING_SEPARATOR = '#';\n\n    id: string;\n    domain: string;\n    action: string;\n    data: object;\n\n    /**\n     * Creates an instance of SandboxEvent.\n     * @param {string} domain\n     * @param {string} action\n     * @param {object} data\n     * @memberof SandboxEvent\n     */\n    constructor(domain: string, action: string, data?: object) {\n        this.domain = domain;\n        this.action = action;\n        this.data = data;\n        this.id = this.generateId();\n    }\n\n    /**\n     * Generates a random event id,\n     * used to track events when exchanged with the sandbox\n     *\n     * @return {string} \n     * @memberof SandboxEvent\n     */\n    private generateId() {\n        const nanoid = customAlphabet('1234567890', 16);\n        return nanoid();\n    }\n\n    public toString():string {\n        return `${this.id}${this.STRING_SEPARATOR}${this.domain}${this.STRING_SEPARATOR}${this.action}`;\n    }\n}\n","import SandboxEvent from \"./sandbox-event\";\n\nexport default class SandboxEventDispatcher {\n    private PARENT_TARGET_ORIGIN = 'https://localhost/tabjail/sandbox';\n\n    public sendSandboxEvent(sandboxEvent: SandboxEvent) {\n        window.parent.postMessage(sandboxEvent, this.PARENT_TARGET_ORIGIN);\n    }\n}","import SandboxEvent from \"./sandbox-event\";\n\nexport default class SandboxEventPromise {\n    private resolve: (value: any) => void;\n    private reject: (reason?: any) => void;\n    public sandboxEvent: SandboxEvent;\n    \n    constructor(sandboxEvent: SandboxEvent) {\n        this.sandboxEvent = sandboxEvent;\n    }\n\n    public createPromise(): Promise<any> {\n        return new Promise( (resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n\n    public resolvePromise(data: any): void {\n        this.resolve(data);\n    }\n\n    public rejectPromise(reason: string) :void {\n        this.reject(reason);\n    }\n}","import SandboxEvent from \"../../../model/sandbox-event\";\nimport SandboxEventDispatcher from \"../../../model/sandbox-event-dispatcher\";\nimport SandboxEventPromise from \"../../../model/sandbox-event-promise\";\n\nexport default class Windows extends SandboxEventDispatcher{\n\n    private DOMAIN = 'extension';\n    private ACTIONS = {\n        GET_ALL_WINDOWS: 'getAllWindows',\n        ON_BOUNDS_CHANGED_WINDOWS: 'onBoundsChangedWindows',\n        ON_CREATED_WINDOWS: 'onCreatedWindows',\n        ON_FOCUS_CHANGED_WINDOWS: 'onFocusChangedWindows',\n        ON_REMOVED_WINDOWS: 'onRemovedWindows'\n    }\n\n    private pendingRequests: SandboxEventPromise[] = [];\n\n    public async getAll(): Promise<chrome.windows.Window[]> {\n        const sandboxEvent = new SandboxEvent(this.DOMAIN, this.ACTIONS.GET_ALL_WINDOWS);\n        const sandboxEventPromise = new SandboxEventPromise(sandboxEvent);\n        this.pendingRequests.push(sandboxEventPromise);\n        this.sendSandboxEvent(sandboxEvent);\n        const promise = sandboxEventPromise.createPromise();\n        return await promise;\n    }\n\n    // public async update(windowId: string, updateInfo: chrome.windows.UpdateInfo): Promise<chrome.windows.Window> {\n    //     const sandboxEvent = new SandboxEvent('extension','updateWindows', {windowId: windowId, updateInfo: updateInfo});\n    //     const sandboxEventPromise = new SandboxEventPromise(sandboxEvent);\n    //     this.pendingRequests.push(sandboxEventPromise);\n    //     return sandboxEventPromise.createPromise();\n    // }\n\n\n    private onBoundsChangedCallbacks: Function[] = [];\n    public onBoundsChanged(callback: Function): void {\n        this.onBoundsChangedCallbacks.push(callback);\n    }\n\n    private onCreatedCallbacks: Function[] = [];\n    public onCreated(callback: Function): void {\n        this.onCreatedCallbacks.push(callback);\n    }\n\n    private onFocusChangedCallbacks: Function[] = [];\n    public onFocusChanged(callback: Function): void {\n        this.onFocusChangedCallbacks.push(callback);\n    }\n\n    private onRemovedCallbacks: Function[] = [];\n    public onRemoved(callback: Function): void {\n        this.onRemovedCallbacks.push(callback);\n    }\n\n    public onEventFromSandbox(sandboxEvent: SandboxEvent): void {\n        if (sandboxEvent.domain === this.DOMAIN) {\n            switch (sandboxEvent.action) {\n                case this.ACTIONS.GET_ALL_WINDOWS:\n                    const foundPromise = this.pendingRequests.find(request => request.sandboxEvent.id === sandboxEvent.id);\n                    if (foundPromise) {\n                        foundPromise.resolvePromise(sandboxEvent);\n                    }\n                    break;\n                case this.ACTIONS.ON_BOUNDS_CHANGED_WINDOWS:\n                    this.onBoundsChangedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.ACTIONS.ON_CREATED_WINDOWS:\n                    this.onCreatedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.ACTIONS.ON_FOCUS_CHANGED_WINDOWS:\n                    this.onFocusChangedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.ACTIONS.ON_BOUNDS_CHANGED_WINDOWS:\n                    this.onRemovedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n    \n}","import sandboxEvent from \"../../model/sandbox-event\";\nimport Windows from \"./windows/windows\";\n\nexport default class Chrome {\n\n    public windows = new Windows();\n\n    onEventFromSandbox(sandboxEvent: sandboxEvent): void {\n        this.windows.onEventFromSandbox(sandboxEvent);\n    }\n}","import sandboxEvent from \"../model/sandbox-event\";\nimport Chrome from \"./chrome/chrome\";\n\nexport default class Api {\n    static chrome = new Chrome();\n\n    static onEventFromSandbox(sandboxEvent: sandboxEvent): void {\n        this.chrome.onEventFromSandbox(sandboxEvent);\n    }\n}","import Api from \"./api/api\";\nimport SandboxEvent from \"./model/sandbox-event\";\n\nexport function listenForSandboxEvents(): void {\n    window.addEventListener('message', message => {\n        Api.onEventFromSandbox(message.data as SandboxEvent);\n    }, false);\n}\n\nexport const TJ = Api;\n"],"names":["random","bytes","crypto","getRandomValues","Uint8Array","SandboxEvent","domain","action","data","STRING_SEPARATOR","id","this","generateId","alphabet","size","getRandom","mask","Math","log","length","LN2","step","j","customRandom","nanoid","toString","SandboxEventDispatcher","PARENT_TARGET_ORIGIN","sendSandboxEvent","sandboxEvent","window","parent","postMessage","SandboxEventPromise","resolve","reject","createPromise","Promise","_this","resolvePromise","rejectPromise","reason","Windows","DOMAIN","ACTIONS","GET_ALL_WINDOWS","ON_BOUNDS_CHANGED_WINDOWS","ON_CREATED_WINDOWS","ON_FOCUS_CHANGED_WINDOWS","ON_REMOVED_WINDOWS","pendingRequests","onBoundsChangedCallbacks","onCreatedCallbacks","onFocusChangedCallbacks","onRemovedCallbacks","getAll","_this3","sandboxEventPromise","push","promise","onBoundsChanged","callback","onCreated","onFocusChanged","onRemoved","onEventFromSandbox","foundPromise","find","request","forEach","Chrome","windows","Api","chrome","listenForSandboxEvents","addEventListener","message","TJ"],"mappings":"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"}