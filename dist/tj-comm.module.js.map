{"version":3,"file":"tj-comm.module.js","sources":["../node_modules/nanoid/index.prod.js","../src/model/sandbox-event.ts","../src/model/sandbox-event-promise.ts","../src/api/chrome/windows/windows.ts","../src/api/chrome/chrome.ts","../src/api/api.ts","../src/index.ts"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nif (false) {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { customAlphabet } from 'nanoid';\n\n/**\n *  Event that is sent across the sandbox event bus,\n *  it can be exchanged with the sandbox page\n * \n * @class SandboxEvent\n */\nexport default class SandboxEvent {\n    id: string;\n    domain: string;\n    action: string;\n    data: object;\n\n    /**\n     * Creates an instance of SandboxEvent.\n     * @param {string} domain\n     * @param {string} action\n     * @param {object} data\n     * @memberof SandboxEvent\n     */\n    constructor(domain: string, action: string, data?: object) {\n        this.domain = domain;\n        this.action = action;\n        this.data = data;\n        this.id = this.generateId();\n    }\n\n    /**\n     * Generates a random event id,\n     * used to track events when exchanged with the sandbox\n     *\n     * @return {string} \n     * @memberof SandboxEvent\n     */\n    private generateId() {\n        const nanoid = customAlphabet('1234567890', 16);\n        return nanoid();\n    }\n}\n","import SandboxEvent from \"./sandbox-event\";\n\nexport default class SandboxEventPromise {\n    // public promiseId: string;\n    private resolve: (value: any) => void;\n    private reject: (reason?: any) => void;\n    public sandboxEvent: SandboxEvent;\n    \n    constructor(sandboxEvent: SandboxEvent) {\n        this.sandboxEvent = sandboxEvent;\n        // this.promiseId = this.sandboxEvent.id;\n    }\n\n    public createPromise(): Promise<any> {\n        return new Promise( (resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n\n    public resolvePromise(data: any): void {\n        this.resolve(data);\n    }\n\n    public rejectPromise(reason: string) :void {\n        this.reject(reason);\n    }\n}","import { sendSandboxEvent } from \"../../..\";\nimport SandboxEvent from \"../../../model/sandbox-event\";\nimport SandboxEventPromise from \"../../../model/sandbox-event-promise\";\n\nexport default class Windows {\n\n    private DOMAIN = 'extension';\n    private ACTIONS = {\n        GET_ALL_WINDOWS: 'getAllWindows',\n        ON_BOUNDS_CHANGED_WINDOWS: 'onBoundsChangedWindows',\n        ON_CREATED_WINDOWS: 'onCreatedWindows',\n        ON_FOCUS_CHANGED_WINDOWS: 'onFocusChangedWindows',\n        ON_REMOVED_WINDOWS: 'onRemovedWindows'\n    }\n\n    private pendingRequests: SandboxEventPromise[];\n\n    public async getAll(): Promise<chrome.windows.Window[]> {\n        const sandboxEvent = new SandboxEvent(this.DOMAIN, this.ACTIONS.GET_ALL_WINDOWS);\n        const sandboxEventPromise = new SandboxEventPromise(sandboxEvent);\n        this.pendingRequests.push(sandboxEventPromise);\n        sendSandboxEvent(sandboxEvent);\n        return sandboxEventPromise.createPromise();\n    }\n\n    // public async update(windowId: string, updateInfo: chrome.windows.UpdateInfo): Promise<chrome.windows.Window> {\n    //     const sandboxEvent = new SandboxEvent('extension','updateWindows', {windowId: windowId, updateInfo: updateInfo});\n    //     const sandboxEventPromise = new SandboxEventPromise(sandboxEvent);\n    //     this.pendingRequests.push(sandboxEventPromise);\n    //     return sandboxEventPromise.createPromise();\n    // }\n\n    public onBoundsChanged(window: chrome.windows.Window, callback: Function): void {\n        callback(window);\n    }\n\n    public onCreated(window: chrome.windows.Window, callback: Function): void {\n        callback(window);\n    }\n\n    public onFocusChanged(windowId: number, callback: Function): void {\n        callback(windowId);\n    }\n\n    public onRemoved(windowId: number, callback: Function): void {\n        callback(windowId);\n    }\n\n    public registerCallback(callback: Function) {\n        callback();\n    }\n\n    public onSandboxEvent(sandboxEvent: SandboxEvent): void {\n        if (sandboxEvent.domain === this.DOMAIN) {\n            switch (sandboxEvent.action) {\n                case this.ACTIONS.GET_ALL_WINDOWS:\n                    const sandboxEventPromise = this.pendingRequests.find(request => request.sandboxEvent.id === sandboxEvent.id);\n                    if(sandboxEventPromise) {\n                        sandboxEventPromise.resolvePromise(sandboxEvent.data);\n                    } else {\n                        sandboxEventPromise.rejectPromise('Cannot resolve event.');\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    public onIframeEvent(eventName: string): Promise<any> {\n        let responsePromise = null;\n        switch (eventName) {\n            case this.ACTIONS.GET_ALL_WINDOWS:\n                responsePromise = this.getAll();\n                break;\n            default:\n                break;\n        }\n        return responsePromise;\n    }\n}","import sandboxEvent from \"../../model/sandbox-event\";\nimport Windows from \"./windows/windows\";\n\nexport default class Chrome {\n\n    public windows = new Windows();\n\n    onSandboxEvent(sandboxEvent: sandboxEvent): void {\n        this.windows.onSandboxEvent(sandboxEvent);\n    }\n\n    onIframeEvent(eventName: string): Promise<any> {\n        return this.windows.onIframeEvent(eventName);\n    }\n}","import sandboxEvent from \"../model/sandbox-event\";\nimport Chrome from \"./chrome/chrome\";\n\nexport default class Api {\n    static chrome = new Chrome();\n    \n    static onSandboxEvent(sandboxEvent: sandboxEvent) {\n        return this.chrome.onSandboxEvent(sandboxEvent);\n    }\n\n    static onIframeEvent(eventName: string): Promise<any> {\n        return this.chrome.onIframeEvent(eventName);\n    }\n}","import Api from \"./api/api\";\nimport Windows from \"./api/chrome/windows/windows\";\nimport SandboxEvent from \"./model/sandbox-event\";\n\nconst SANDBOX_EVENT_PATH = 'tabjail.event';\n\nexport function sendSandboxEvent(sandboxEvent: SandboxEvent) {\n    fetch(SANDBOX_EVENT_PATH, {\n        method: \"POST\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(sandboxEvent)\n    });\n}\n\n// export function sendExtensionEvent(sandboxEvent: SandboxEvent) {\n//     // @ts-ignore\n//     chrome.runtime.sendMessage(sandboxEvent.data.extensionId, sandboxEvent);\n// }\n\nexport function onSandboxEvent(sandboxEvent: SandboxEvent) {\n    return Api.onSandboxEvent(sandboxEvent);\n}\n\nexport function onIframeEvent(eventName: string): Promise<any> {\n    return Api.onIframeEvent(eventName);\n}\n\nexport function registerIframeCallback(): void {\n    window.addEventListener('message', message => {\n        return onIframeEvent(message.data as string);\n    }, false);\n}\n"],"names":["random","bytes","crypto","getRandomValues","Uint8Array","SandboxEvent","domain","action","data","id","this","generateId","alphabet","size","getRandom","mask","Math","log","length","LN2","step","j","customRandom","nanoid","SandboxEventPromise","sandboxEvent","resolve","reject","createPromise","Promise","_this","resolvePromise","rejectPromise","reason","Windows","DOMAIN","ACTIONS","GET_ALL_WINDOWS","ON_BOUNDS_CHANGED_WINDOWS","ON_CREATED_WINDOWS","ON_FOCUS_CHANGED_WINDOWS","ON_REMOVED_WINDOWS","pendingRequests","getAll","_this2","sandboxEventPromise","push","sendSandboxEvent","onBoundsChanged","window","callback","onCreated","onFocusChanged","windowId","onRemoved","registerCallback","onSandboxEvent","find","request","onIframeEvent","eventName","responsePromise","Chrome","windows","Api","chrome","fetch","method","headers","body","JSON","stringify","registerIframeCallback","addEventListener","message"],"mappings":"AA2BA,IAAIA,EAASC,GAASC,OAAOC,gBAAgB,IAAIC,WAAWH,QCnBvCI,0BAajB,WAAYC,EAAgBC,EAAgBC,QAZ5CC,eACAH,mBACAC,mBACAC,YAUIE,KAAKJ,OAASA,EACdI,KAAKH,OAASA,EACdG,KAAKF,KAAOA,EACZE,KAAKD,GAAKC,KAAKC,gCAUXA,WAAA,WAEJ,MDTW,EAACC,EAAUC,EAAMC,KAClC,IAAIC,GAAQ,GAAMC,KAAKC,IAAIL,EAASM,OAAS,GAAKF,KAAKG,KAAQ,EAC3DC,KAAW,IAAML,ECM6B,GDNdH,EAASM,QAC7C,MAAO,KACL,IAAIT,EAAK,GACT,OAAa,CACX,IAAIR,EAAQa,EAAUM,GAClBC,EAAID,EACR,KAAOC,KAEL,GADAZ,GAAMG,EAASX,EAAMoB,GAAKN,IAAS,GCDS,KDExCN,EAAGS,OAAiB,OAAOT,KAKEa,CCPH,aAAc,EDOkBtB,ECNvDuB,SCnCMC,0BAMjB,WAAYC,QAJJC,oBACAC,mBACDF,oBAGHf,KAAKe,aAAeA,6BAIjBG,cAAA,sBACH,WAAWC,QAAS,SAACH,EAASC,GAC1BG,EAAKJ,QAAUA,EACfI,EAAKH,OAASA,OAIfI,eAAA,SAAevB,GAClBE,KAAKgB,QAAQlB,MAGVwB,cAAA,SAAcC,GACjBvB,KAAKiB,OAAOM,SCrBCC,4CAETC,OAAS,iBACTC,QAAU,CACdC,gBAAiB,gBACjBC,0BAA2B,yBAC3BC,mBAAoB,mBACpBC,yBAA0B,wBAC1BC,mBAAoB,yBAGhBC,kDAEKC,4BAC6BjC,KAAhCe,EAAe,IAAIpB,EAAauC,EAAKT,OAAQS,EAAKR,QAAQC,iBAC1DQ,EAAsB,IAAIrB,EAAoBC,GAGpD,OAFAmB,EAAKF,gBAAgBI,KAAKD,GAC1BE,EAAiBtB,mBACVoB,EAAoBjB,uDAUxBoB,gBAAA,SAAgBC,EAA+BC,GAClDA,EAASD,MAGNE,UAAA,SAAUF,EAA+BC,GAC5CA,EAASD,MAGNG,eAAA,SAAeC,EAAkBH,GACpCA,EAASG,MAGNC,UAAA,SAAUD,EAAkBH,GAC/BA,EAASG,MAGNE,iBAAA,SAAiBL,GACpBA,OAGGM,eAAA,SAAe/B,GAClB,GAAIA,EAAanB,SAAWI,KAAKyB,QACrBV,EAAalB,cACP6B,QAAQC,gBAAlB,CACI,IAAMQ,EAAsBnC,KAAKgC,gBAAgBe,KAAK,SAAAC,UAAWA,EAAQjC,aAAahB,KAAOgB,EAAahB,KACvGoC,EACCA,EAAoBd,eAAeN,EAAajB,MAEhDqC,EAAoBb,cAAc,6BAS/C2B,cAAA,SAAcC,GACjB,IAAIC,EAAkB,KAQtB,OAPQD,SACMxB,QAAQC,kBACdwB,EAAkBnD,KAAKiC,UAKxBkB,QC3EMC,4CAEVC,QAAU,IAAI7B,6BAErBsB,eAAA,SAAe/B,GACXf,KAAKqD,QAAQP,eAAe/B,MAGhCkC,cAAA,SAAcC,GACV,YAAYG,QAAQJ,cAAcC,SCTrBI,iDAGVR,eAAP,SAAsB/B,GAClB,YAAYwC,OAAOT,eAAe/B,MAG/BkC,cAAP,SAAqBC,GACjB,YAAYK,OAAON,cAAcC,kBCLzBb,EAAiBtB,GAC7ByC,MAHuB,gBAGG,CACtBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU9C,cASb+B,EAAe/B,GAC3B,OAAOuC,EAAIR,eAAe/B,YAGdkC,EAAcC,GAC1B,OAAOI,EAAIL,cAAcC,YAGbY,IACZvB,OAAOwB,iBAAiB,UAAW,SAAAC,GAC/B,OAAOf,EAAce,EAAQlE,QAC9B,GD3BcwD,EACVC,OAAS,IAAIH"}