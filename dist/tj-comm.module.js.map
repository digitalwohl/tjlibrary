{"version":3,"file":"tj-comm.module.js","sources":["../node_modules/nanoid/index.prod.js","../src/model/sandbox-event.ts","../src/model/sandbox-event-dispatcher.ts","../src/model/sandbox-event-promise.ts","../src/api/chrome/tabs/tabs.ts","../src/api/chrome/windows/windows.ts","../src/api/chrome/chrome.ts","../src/api/sandbox/general/general.ts","../src/api/sandbox/sandbox.ts","../src/api/api.ts","../src/index.ts"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nif (false) {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { customAlphabet } from 'nanoid';\n\n/**\n *  Event that is sent across the sandbox event bus,\n *  it can be exchanged with the sandbox page\n * \n * @class SandboxEvent\n */\nexport default class SandboxEvent {\n    // STRING_SEPARATOR = '#';\n\n    id: string;\n    domain: string;\n    action: string;\n    data: object;\n\n    /**\n     * Creates an instance of SandboxEvent.\n     * @param {string} domain\n     * @param {string} action\n     * @param {object} data\n     * @memberof SandboxEvent\n     */\n    constructor(domain: string, action: string, data?: object) {\n        this.domain = domain;\n        this.action = action;\n        this.data = data;\n        this.id = this.generateId();\n    }\n\n    /**\n     * Generates a random event id,\n     * used to track events when exchanged with the sandbox\n     *\n     * @return {string} \n     * @memberof SandboxEvent\n     */\n    private generateId() {\n        const nanoid = customAlphabet('1234567890', 16);\n        return nanoid();\n    }\n\n    // public toString():string {\n    //     return `${this.id}${this.STRING_SEPARATOR}${this.domain}${this.STRING_SEPARATOR}${this.action}`;\n    // }\n}\n","import SandboxEvent from \"./sandbox-event\";\n\nexport default class SandboxEventDispatcher {\n    private PARENT_TARGET_ORIGIN = 'https://localhost/tabjail/sandbox';\n\n    public sendSandboxEvent(sandboxEvent: SandboxEvent) {\n        window.parent.postMessage(sandboxEvent, this.PARENT_TARGET_ORIGIN);\n    }\n\n    public registerSubscription(domain:string, action: string) {\n        const sandboxEvent = new SandboxEvent(domain, action);\n        this.sendSandboxEvent(sandboxEvent);\n    }\n}","import SandboxEvent from \"./sandbox-event\";\n\nexport default class SandboxEventPromise {\n    private resolve: (value: any) => void;\n    private reject: (reason?: any) => void;\n    public sandboxEvent: SandboxEvent;\n    \n    constructor(sandboxEvent: SandboxEvent) {\n        this.sandboxEvent = sandboxEvent;\n    }\n\n    public createPromise(): Promise<any> {\n        return new Promise( (resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n\n    public resolvePromise(data: any): void {\n        this.resolve(data);\n    }\n\n    public rejectPromise(reason: string) :void {\n        this.reject(reason);\n    }\n}","import SandboxEvent from \"../../../model/sandbox-event\";\nimport SandboxEventDispatcher from \"../../../model/sandbox-event-dispatcher\";\nimport SandboxEventPromise from \"../../../model/sandbox-event-promise\";\n\nexport default class Tabs extends SandboxEventDispatcher {\n\n    private DOMAIN = 'extension';\n    private ACTIONS = {\n        QUERY: 'queryTabs',\n        ON_ACTIVATED_TABS: 'onActivatedTabs',\n        ON_ACTIVE_CHANGED_TABS: 'onActiveChangedTabs',\n        ON_ATTACHED_TABS: 'onAttachedTabs',\n        ON_CREATED_TABS: 'onCreatedTabs',\n        ON_DETACHED_TABS: 'onDetachedTabs',\n        ON_HIGHLIGHT_CHANGED_TABS: 'onHighlightChangedTabs',\n        ON_HIGHLIGHTED_TABS: 'onHighlightedTabs',\n        ON_MOVED_TABS: 'onMovedTabs',\n        ON_REMOVED_TABS: 'onRemovedTabs',\n        ON_REPLACED_TABS: 'onReplacedTabs',\n        ON_SELECTION_CHANGED_TABS: 'onSelectionChangedTabs',\n        ON_UPDATED_TABS: 'onUpdatedTabs',\n        ON_ZOOM_CHANGE_TABS: 'onZoomChangeTabs'\n    }\n\n    private pendingRequests: SandboxEventPromise[] = [];\n\n    public query(): Promise<chrome.tabs.Tab[]> {\n        const sandboxEvent = new SandboxEvent(this.DOMAIN, this.ACTIONS.QUERY);\n        const sandboxEventPromise = new SandboxEventPromise(sandboxEvent);\n        this.pendingRequests.push(sandboxEventPromise);\n        this.sendSandboxEvent(sandboxEvent);\n        return sandboxEventPromise.createPromise();\n    }\n\n    private onActivatedCallbacks: Function[] = [];\n    public onActivated(callback: Function): void {\n        this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_ACTIVATED_TABS);\n        this.onActivatedCallbacks.push(callback);\n    }\n\n    // private onActiveChangedCallbacks: Function[] = [];\n    // public onActiveChanged(callback: Function): void {\n    //     this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_ACTIVE_CHANGED_TABS);\n    //     this.onActiveChangedCallbacks.push(callback);\n    // }\n\n    private onAttachedCallbacks: Function[] = [];\n    public onAttached(callback: Function): void {\n        this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_ATTACHED_TABS);\n        this.onAttachedCallbacks.push(callback);\n    }\n\n    private onCreatedCallbacks: Function[] = [];\n    public onCreated(callback: Function): void {\n        this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_CREATED_TABS);\n        this.onCreatedCallbacks.push(callback);\n    }\n\n    private onDetachedCallbacks: Function[] = [];\n    public onDetached(callback: Function): void {\n        this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_DETACHED_TABS);\n        this.onDetachedCallbacks.push(callback);\n    }\n\n    // private onHighlightChangedCallbacks: Function[] = [];\n    // public onHighlightChanged(callback: Function): void {\n    //     this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_HIGHLIGHT_CHANGED_TABS);\n    //     this.onHighlightChangedCallbacks.push(callback);\n    // }\n\n    private onHighlightedCallbacks: Function[] = [];\n    public onHighlighted(callback: Function): void {\n        this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_HIGHLIGHTED_TABS);\n        this.onHighlightedCallbacks.push(callback);\n    }\n\n    private onMovedCallbacks: Function[] = [];\n    public onMoved(callback: Function): void {\n        this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_MOVED_TABS);\n        this.onMovedCallbacks.push(callback);\n    }\n\n    private onRemovedCallbacks: Function[] = [];\n    public onRemoved(callback: Function): void {\n        this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_REMOVED_TABS);\n        this.onRemovedCallbacks.push(callback);\n    }\n\n    private onReplacedCallbacks: Function[] = [];\n    public onReplaced(callback: Function): void {\n        this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_REPLACED_TABS);\n        this.onReplacedCallbacks.push(callback);\n    }\n\n    // private onSelectionChangedCallbacks: Function[] = [];\n    // public onSelectionChanged(callback: Function): void {\n    //     this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_SELECTION_CHANGED_TABS);\n    //     this.onSelectionChangedCallbacks.push(callback);\n    // }\n\n    private onUpdatedCallbacks: Function[] = [];\n    public onUpdated(callback: Function): void {\n        this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_UPDATED_TABS);\n        this.onUpdatedCallbacks.push(callback);\n    }\n\n    private onZoomChangeCallbacks: Function[] = [];\n    public onZoomChange(callback: Function): void {\n        this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_ZOOM_CHANGE_TABS);\n        this.onZoomChangeCallbacks.push(callback);\n    }\n\n\n    public onEventFromSandbox(sandboxEvent: SandboxEvent): void {\n        if (sandboxEvent.domain === this.DOMAIN) {\n            switch (sandboxEvent.action) {\n                case this.ACTIONS.QUERY:\n                    const foundPromise = this.pendingRequests.find(request => request.sandboxEvent.id === sandboxEvent.id);\n                    const fountPromiseIndex = this.pendingRequests.findIndex(request => request.sandboxEvent.id === sandboxEvent.id);\n                    if (foundPromise) {\n                        foundPromise.resolvePromise(sandboxEvent.data);\n                        this.pendingRequests.splice(fountPromiseIndex, 1);\n                    }\n                    break;\n                case this.ACTIONS.ON_ACTIVATED_TABS:\n                    this.onActivatedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                // case this.ACTIONS.ON_ACTIVE_CHANGED_TABS:\n                //     this.onActiveChangedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                //     break;\n                case this.ACTIONS.ON_ATTACHED_TABS:\n                    this.onAttachedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.ACTIONS.ON_CREATED_TABS:\n                    this.onCreatedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.ACTIONS.ON_DETACHED_TABS:\n                    this.onDetachedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                // case this.ACTIONS.ON_HIGHLIGHT_CHANGED_TABS:\n                //     this.onHighlightChangedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                //     break;\n                case this.ACTIONS.ON_HIGHLIGHTED_TABS:\n                    this.onHighlightedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.ACTIONS.ON_MOVED_TABS:\n                    this.onMovedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.ACTIONS.ON_REMOVED_TABS:\n                    this.onRemovedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.ACTIONS.ON_REPLACED_TABS:\n                    this.onReplacedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                // case this.ACTIONS.ON_SELECTION_CHANGED_TABS:\n                //     this.onSelectionChangedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                //     break;\n                case this.ACTIONS.ON_UPDATED_TABS:\n                    this.onUpdatedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.ACTIONS.ON_ZOOM_CHANGE_TABS:\n                    this.onZoomChangeCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n\n}","import SandboxEvent from \"../../../model/sandbox-event\";\nimport SandboxEventDispatcher from \"../../../model/sandbox-event-dispatcher\";\nimport SandboxEventPromise from \"../../../model/sandbox-event-promise\";\n\nexport default class Windows extends SandboxEventDispatcher{\n\n    private DOMAIN = 'extension';\n    private ACTIONS = {\n        GET_ALL_WINDOWS: 'getAllWindows',\n        ON_BOUNDS_CHANGED_WINDOWS: 'onBoundsChangedWindows',\n        ON_CREATED_WINDOWS: 'onCreatedWindows',\n        ON_FOCUS_CHANGED_WINDOWS: 'onFocusChangedWindows',\n        ON_REMOVED_WINDOWS: 'onRemovedWindows'\n    }\n\n    private pendingRequests: SandboxEventPromise[] = [];\n\n    public getAll(): Promise<chrome.windows.Window[]> {\n        const sandboxEvent = new SandboxEvent(this.DOMAIN, this.ACTIONS.GET_ALL_WINDOWS);\n        const sandboxEventPromise = new SandboxEventPromise(sandboxEvent);\n        this.pendingRequests.push(sandboxEventPromise);\n        this.sendSandboxEvent(sandboxEvent);\n        return sandboxEventPromise.createPromise();\n    }\n\n    // public async update(windowId: string, updateInfo: chrome.windows.UpdateInfo): Promise<chrome.windows.Window> {\n    //     const sandboxEvent = new SandboxEvent('extension','updateWindows', {windowId: windowId, updateInfo: updateInfo});\n    //     const sandboxEventPromise = new SandboxEventPromise(sandboxEvent);\n    //     this.pendingRequests.push(sandboxEventPromise);\n    //     return sandboxEventPromise.createPromise();\n    // }\n\n\n    private onBoundsChangedCallbacks: Function[] = [];\n    public onBoundsChanged(callback: Function): void {\n        this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_BOUNDS_CHANGED_WINDOWS);\n        this.onBoundsChangedCallbacks.push(callback);\n    }\n\n    private onCreatedCallbacks: Function[] = [];\n    public onCreated(callback: Function): void {\n        this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_CREATED_WINDOWS);\n        this.onCreatedCallbacks.push(callback);\n    }\n\n    private onFocusChangedCallbacks: Function[] = [];\n    public onFocusChanged(callback: Function): void {\n        this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_FOCUS_CHANGED_WINDOWS);\n        this.onFocusChangedCallbacks.push(callback);\n    }\n\n    private onRemovedCallbacks: Function[] = [];\n    public onRemoved(callback: Function): void {\n        this.registerSubscription(this.DOMAIN, this.ACTIONS.ON_REMOVED_WINDOWS);\n        this.onRemovedCallbacks.push(callback);\n    }\n\n    public onEventFromSandbox(sandboxEvent: SandboxEvent): void {\n        if (sandboxEvent.domain === this.DOMAIN) {\n            switch (sandboxEvent.action) {\n                case this.ACTIONS.GET_ALL_WINDOWS:\n                    const foundPromise = this.pendingRequests.find(request => request.sandboxEvent.id === sandboxEvent.id);\n                    const fountPromiseIndex = this.pendingRequests.findIndex(request => request.sandboxEvent.id === sandboxEvent.id);\n                    if (foundPromise) {\n                        foundPromise.resolvePromise(sandboxEvent.data);\n                        this.pendingRequests.splice(fountPromiseIndex, 1);\n                    }\n                    break;\n                case this.ACTIONS.ON_BOUNDS_CHANGED_WINDOWS:\n                    this.onBoundsChangedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.ACTIONS.ON_CREATED_WINDOWS:\n                    this.onCreatedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.ACTIONS.ON_FOCUS_CHANGED_WINDOWS:\n                    this.onFocusChangedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.ACTIONS.ON_BOUNDS_CHANGED_WINDOWS:\n                    this.onRemovedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n    \n}","import SandboxEvent from \"../../model/sandbox-event\";\nimport Tabs from \"./tabs/tabs\";\nimport Windows from \"./windows/windows\";\n\nexport default class Chrome {\n\n    public windows = new Windows();\n    public tabs = new Tabs();\n\n    onEventFromSandbox(sandboxEvent: SandboxEvent): void {\n        this.windows.onEventFromSandbox(sandboxEvent);\n    }\n}","import SandboxEvent from \"../../../model/sandbox-event\";\nimport SandboxEventDispatcher from \"../../../model/sandbox-event-dispatcher\";\nimport SandboxEventPromise from \"../../../model/sandbox-event-promise\";\nimport Api from \"../../api\";\n\nexport default class General extends SandboxEventDispatcher {\n\n    private DOMAIN = 'sandbox';\n    private ACTIONS = {\n        JAIL_PAGE: 'jailPage',\n        READY: 'isReady'\n    }\n\n    private pendingRequests: SandboxEventPromise[] = [];\n\n    public ready(): Promise<boolean> {\n        const sandboxEvent = new SandboxEvent(this.DOMAIN, this.ACTIONS.JAIL_PAGE);\n        const sandboxEventPromise = new SandboxEventPromise(sandboxEvent);\n        this.pendingRequests.push(sandboxEventPromise);\n        this.sendSandboxEvent(sandboxEvent);\n        this.registerSandboxEventsListener();\n        return sandboxEventPromise.createPromise();\n    }\n\n    public onEventFromSandbox(sandboxEvent: SandboxEvent): void {\n        if (sandboxEvent.domain === this.DOMAIN) {\n            switch (sandboxEvent.action) {\n                case this.ACTIONS.READY:\n                    const foundPromise = this.pendingRequests.find(request => request.sandboxEvent.id === sandboxEvent.id);\n                    const fountPromiseIndex = this.pendingRequests.findIndex(request => request.sandboxEvent.id === sandboxEvent.id);\n                    if (foundPromise) {\n                        foundPromise.resolvePromise(true);\n                        this.pendingRequests.splice(fountPromiseIndex, 1);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    private registerSandboxEventsListener(): void {\n        window.addEventListener('message', message => {\n            Api.onEventFromSandbox(message.data as SandboxEvent);\n        }, false);\n    }\n\n}","import SandboxEvent from \"../../model/sandbox-event\";\nimport General from \"./general/general\";\n\nexport default class Sandbox {\n\n    public general = new General();\n\n    onEventFromSandbox(sandboxEvent: SandboxEvent): void {\n        this.general.onEventFromSandbox(sandboxEvent);\n    }\n}","import SandboxEvent from \"../model/sandbox-event\";\nimport Chrome from \"./chrome/chrome\";\nimport Sandbox from \"./sandbox/sandbox\";\n\nexport default class Api {\n    static chrome = new Chrome();\n    static sandbox = new Sandbox();\n\n    static onEventFromSandbox(sandboxEvent: SandboxEvent): void {\n        this.sandbox.onEventFromSandbox(sandboxEvent);\n        this.chrome.onEventFromSandbox(sandboxEvent);\n    }\n}","import Api from \"./api/api\";\n\nexport const TJ = Api;"],"names":["random","bytes","crypto","getRandomValues","Uint8Array","SandboxEvent","domain","action","data","id","this","generateId","alphabet","size","getRandom","mask","Math","log","length","LN2","step","j","customRandom","nanoid","SandboxEventDispatcher","PARENT_TARGET_ORIGIN","sendSandboxEvent","sandboxEvent","window","parent","postMessage","registerSubscription","SandboxEventPromise","resolve","reject","createPromise","Promise","_this","resolvePromise","rejectPromise","reason","Tabs","DOMAIN","ACTIONS","QUERY","ON_ACTIVATED_TABS","ON_ACTIVE_CHANGED_TABS","ON_ATTACHED_TABS","ON_CREATED_TABS","ON_DETACHED_TABS","ON_HIGHLIGHT_CHANGED_TABS","ON_HIGHLIGHTED_TABS","ON_MOVED_TABS","ON_REMOVED_TABS","ON_REPLACED_TABS","ON_SELECTION_CHANGED_TABS","ON_UPDATED_TABS","ON_ZOOM_CHANGE_TABS","pendingRequests","onActivatedCallbacks","onAttachedCallbacks","onCreatedCallbacks","onDetachedCallbacks","onHighlightedCallbacks","onMovedCallbacks","onRemovedCallbacks","onReplacedCallbacks","onUpdatedCallbacks","onZoomChangeCallbacks","query","sandboxEventPromise","push","onActivated","callback","onAttached","onCreated","onDetached","onHighlighted","onMoved","onRemoved","onReplaced","onUpdated","onZoomChange","onEventFromSandbox","foundPromise","find","request","fountPromiseIndex","findIndex","splice","forEach","Windows","GET_ALL_WINDOWS","ON_BOUNDS_CHANGED_WINDOWS","ON_CREATED_WINDOWS","ON_FOCUS_CHANGED_WINDOWS","ON_REMOVED_WINDOWS","onBoundsChangedCallbacks","onFocusChangedCallbacks","getAll","onBoundsChanged","onFocusChanged","Chrome","windows","tabs","General","JAIL_PAGE","READY","ready","registerSandboxEventsListener","addEventListener","message","Api","Sandbox","general","sandbox","chrome","TJ"],"mappings":"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"}