{"version":3,"file":"tj-comm.umd.js","sources":["../node_modules/nanoid/index.prod.js","../src/model/sandbox-event.ts","../src/model/sandbox-event-dispatcher.ts","../src/model/sandbox-event-promise.ts","../src/api/chrome/tabs/tabs.ts","../src/api/chrome/windows/windows.ts","../src/api/chrome/chrome.ts","../src/api/sandbox/page/page.ts","../src/api/sandbox/sandbox.ts","../src/api/api.ts","../src/index.ts"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nif (false) {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { customAlphabet } from 'nanoid';\n\n/**\n * \n *  Event that is sent across the sandbox event bus,\n *  it can be exchanged with the sandbox page\n * \n * @class SandboxEvent\n */\nexport default class SandboxEvent {\n    // STRING_SEPARATOR = '#';\n\n    id: string;\n    domain: string;\n    api: string;\n    method: string;\n    data: object;\n\n    /**\n     * @internal\n     * Creates an instance of SandboxEvent.\n     * @param {string} domain\n     * @param {string} api\n     * @param {string} method\n     * @param {object} data\n     * @memberof SandboxEvent\n     */\n    constructor(domain: string, api: string, method: string,  data?: object) {\n        this.domain = domain;\n        this.api = api;\n        this.method = method;\n        this.data = data;\n        this.id = this.generateId();\n    }\n\n    /**\n     * @internal\n     * Generates a random event id,\n     * used to track events when exchanged with the sandbox\n     *\n     * @return {string} \n     * @memberof SandboxEvent\n     */\n    private generateId() {\n        const nanoid = customAlphabet('1234567890', 16);\n        return nanoid();\n    }\n\n    // public toString():string {\n    //     return `${this.id}${this.STRING_SEPARATOR}${this.domain}${this.STRING_SEPARATOR}${this.action}`;\n    // }\n}\n","import SandboxEvent from \"./sandbox-event\";\n\n\nexport default class SandboxEventDispatcher {\n    private PARENT_TARGET_ORIGIN = 'https://localhost/tabjail/sandbox';\n    private REGISTER_SUBSCRIPTION_DOMAIN = 'sandbox';\n    private REGISTER_SUBSCRIPTION_API = 'page';\n    private REGISTER_SUBSCRIPTION_METHOD = 'registerSubscription';\n\n    /**\n     *  @internal\n     */\n    constructor() { }\n\n    /**\n     *  @internal\n     */\n    protected sendSandboxEvent(sandboxEvent: SandboxEvent) {\n        window.parent.postMessage(sandboxEvent, this.PARENT_TARGET_ORIGIN);\n    }\n\n    /**\n     *  @internal\n     */\n    protected registerSubscription(domain: string, api: string, method: string) {\n        let data = {\n            domain: domain,\n            api: api,\n            method: method\n        }\n        const sandboxEvent = new SandboxEvent(this.REGISTER_SUBSCRIPTION_DOMAIN, this.REGISTER_SUBSCRIPTION_API, this.REGISTER_SUBSCRIPTION_METHOD, data);\n        this.sendSandboxEvent(sandboxEvent);\n    }\n}","import SandboxEvent from \"./sandbox-event\";\n\nexport default class SandboxEventPromise {\n    private resolve: (value: any) => void;\n    private reject: (reason?: any) => void;\n    /**\n     *  @internal\n     */ \n    public sandboxEvent: SandboxEvent;\n\n    /**\n     *  @internal\n     */ \n    constructor(sandboxEvent: SandboxEvent) {\n        this.sandboxEvent = sandboxEvent;\n    }\n\n    /**\n     *  @internal\n     */ \n    public createPromise(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n\n    /**\n     *  @internal\n     */ \n    public resolvePromise(data: any): void {\n        this.resolve(data);\n    }\n\n    /**\n     *  @internal\n     */ \n    public rejectPromise(reason: string): void {\n        this.reject(reason);\n    }\n}","import SandboxEvent from \"../../../model/sandbox-event\";\nimport SandboxEventDispatcher from \"../../../model/sandbox-event-dispatcher\";\nimport SandboxEventPromise from \"../../../model/sandbox-event-promise\";\n\nexport default class Tabs extends SandboxEventDispatcher {\n\n    private CHROME = {\n        domainName: 'CHROME',\n        TABS: {\n            apiName: 'tabs',\n            QUERY: {\n                methodName: 'query'\n            },\n            ON_ACTIVATED: {\n                methodName: 'onActivated'\n            },\n            ON_ATTACHED: {\n                methodName: 'onAttached'\n            },\n            ON_CREATED: {\n                methodName: 'onCreated'\n            },\n            ON_DETACHED: {\n                methodName: 'onDetached'\n            },\n            ON_HIGHLIGHT_CHANGED: {\n                methodName: 'onHighlightChanged'\n            },\n            ON_HIGHLIGHTED: {\n                methodName: 'onHighlighted'\n            },\n            ON_MOVED: {\n                methodName: 'onMoved'\n            },\n            ON_REMOVED: {\n                methodName: 'onRemoved'\n            },\n            ON_REPLACED: {\n                methodName: 'onReplaced'\n            },\n            ON_SELECTION_CHANGED: {\n                methodName: 'onSelectionChanged'\n            },\n            ON_UPDATED: {\n                methodName: 'onUpdated'\n            },\n            ON_ZOOM_CHANGE: {\n                methodName: 'onZoomChange'\n            }\n        }\n    }\n\n    /**\n     *  @internal\n     */\n    constructor() { super() }\n\n    private pendingRequests: SandboxEventPromise[] = [];\n\n    public query(): Promise<chrome.tabs.Tab[]> {\n        const sandboxEvent = new SandboxEvent(this.CHROME.domainName, this.CHROME.TABS.apiName, this.CHROME.TABS.QUERY.methodName);\n        const sandboxEventPromise = new SandboxEventPromise(sandboxEvent);\n        this.pendingRequests.push(sandboxEventPromise);\n        this.sendSandboxEvent(sandboxEvent);\n        return sandboxEventPromise.createPromise();\n    }\n\n    private onActivatedCallbacks: Function[] = [];\n    public onActivated(callback: Function): void {\n        this.registerSubscription(this.CHROME.domainName, this.CHROME.TABS.apiName, this.CHROME.TABS.ON_ACTIVATED.methodName);\n        this.onActivatedCallbacks.push(callback);\n    }\n\n    private onAttachedCallbacks: Function[] = [];\n    public onAttached(callback: Function): void {\n        this.registerSubscription(this.CHROME.domainName, this.CHROME.TABS.apiName, this.CHROME.TABS.ON_ATTACHED.methodName);\n        this.onAttachedCallbacks.push(callback);\n    }\n\n    private onCreatedCallbacks: Function[] = [];\n    public onCreated(callback: Function): void {\n        this.registerSubscription(this.CHROME.domainName, this.CHROME.TABS.apiName, this.CHROME.TABS.ON_CREATED.methodName);\n        this.onCreatedCallbacks.push(callback);\n    }\n\n    private onDetachedCallbacks: Function[] = [];\n    public onDetached(callback: Function): void {\n        this.registerSubscription(this.CHROME.domainName, this.CHROME.TABS.apiName, this.CHROME.TABS.ON_DETACHED.methodName);\n        this.onDetachedCallbacks.push(callback);\n    }\n\n    private onHighlightedCallbacks: Function[] = [];\n    public onHighlighted(callback: Function): void {\n        this.registerSubscription(this.CHROME.domainName, this.CHROME.TABS.apiName, this.CHROME.TABS.ON_HIGHLIGHTED.methodName);\n        this.onHighlightedCallbacks.push(callback);\n    }\n\n    private onMovedCallbacks: Function[] = [];\n    public onMoved(callback: Function): void {\n        this.registerSubscription(this.CHROME.domainName, this.CHROME.TABS.apiName, this.CHROME.TABS.ON_MOVED.methodName);\n        this.onMovedCallbacks.push(callback);\n    }\n\n    private onRemovedCallbacks: Function[] = [];\n    public onRemoved(callback: Function): void {\n        this.registerSubscription(this.CHROME.domainName, this.CHROME.TABS.apiName, this.CHROME.TABS.ON_REMOVED.methodName);\n        this.onRemovedCallbacks.push(callback);\n    }\n\n    private onReplacedCallbacks: Function[] = [];\n    public onReplaced(callback: Function): void {\n        this.registerSubscription(this.CHROME.domainName, this.CHROME.TABS.apiName, this.CHROME.TABS.ON_REPLACED.methodName);\n        this.onReplacedCallbacks.push(callback);\n    }\n\n    private onUpdatedCallbacks: Function[] = [];\n    public onUpdated(callback: Function): void {\n        this.registerSubscription(this.CHROME.domainName, this.CHROME.TABS.apiName, this.CHROME.TABS.ON_UPDATED.methodName);\n        this.onUpdatedCallbacks.push(callback);\n    }\n\n    private onZoomChangeCallbacks: Function[] = [];\n    public onZoomChange(callback: Function): void {\n        this.registerSubscription(this.CHROME.domainName, this.CHROME.TABS.apiName, this.CHROME.TABS.ON_ZOOM_CHANGE.methodName);\n        this.onZoomChangeCallbacks.push(callback);\n    }\n\n    /**\n     *  @internal\n     */\n    public onEventFromSandbox(sandboxEvent: SandboxEvent): void {\n        if (sandboxEvent.domain === this.CHROME.domainName && sandboxEvent.api === this.CHROME.TABS.apiName) {\n            switch (sandboxEvent.method) {\n                case this.CHROME.TABS.QUERY.methodName:\n                    const foundPromise = this.pendingRequests.find(request => request.sandboxEvent.id === sandboxEvent.id);\n                    const fountPromiseIndex = this.pendingRequests.findIndex(request => request.sandboxEvent.id === sandboxEvent.id);\n                    if (foundPromise) {\n                        foundPromise.resolvePromise(sandboxEvent.data);\n                        this.pendingRequests.splice(fountPromiseIndex, 1);\n                    }\n                    break;\n                case this.CHROME.TABS.ON_ACTIVATED.methodName:\n                    this.onActivatedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.CHROME.TABS.ON_ATTACHED.methodName:\n                    this.onAttachedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.CHROME.TABS.ON_CREATED.methodName:\n                    this.onCreatedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.CHROME.TABS.ON_DETACHED.methodName:\n                    this.onDetachedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.CHROME.TABS.ON_HIGHLIGHTED.methodName:\n                    this.onHighlightedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.CHROME.TABS.ON_MOVED.methodName:\n                    this.onMovedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.CHROME.TABS.ON_REMOVED.methodName:\n                    this.onRemovedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.CHROME.TABS.ON_REPLACED.methodName:\n                    this.onReplacedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.CHROME.TABS.ON_UPDATED.methodName:\n                    this.onUpdatedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.CHROME.TABS.ON_ZOOM_CHANGE.methodName:\n                    this.onZoomChangeCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n\n}","import SandboxEvent from \"../../../model/sandbox-event\";\nimport SandboxEventDispatcher from \"../../../model/sandbox-event-dispatcher\";\nimport SandboxEventPromise from \"../../../model/sandbox-event-promise\";\n\nexport default class Windows extends SandboxEventDispatcher {\n\n    private CHROME = {\n        domainName: 'CHROME',\n        WINDOWS: {\n            apiName: 'windows',\n            GET_ALL: {\n                methodName: 'getAll'\n            },\n            ON_BOUNDS_CHANGED: {\n                methodName: 'onBoundsChanged'\n            },\n            ON_CREATED: {\n                methodName: 'onCreated'\n            },\n            ON_FOCUS_CHANGED: {\n                methodName: 'onFocusChanged'\n            },\n            ON_REMOVED: {\n                methodName: 'onRemoved'\n            }\n        }\n    }\n\n    private pendingRequests: SandboxEventPromise[] = [];\n\n    /**\n     *  @internal\n     */\n    constructor() { super() }\n\n    public getAll(): Promise<chrome.windows.Window[]> {\n        const sandboxEvent = new SandboxEvent(this.CHROME.domainName, this.CHROME.WINDOWS.apiName, this.CHROME.WINDOWS.GET_ALL.methodName);\n        const sandboxEventPromise = new SandboxEventPromise(sandboxEvent);\n        this.pendingRequests.push(sandboxEventPromise);\n        this.sendSandboxEvent(sandboxEvent);\n        return sandboxEventPromise.createPromise();\n    }\n\n    private onBoundsChangedCallbacks: Function[] = [];\n    public onBoundsChanged(callback: (window: chrome.windows.Window) => void): void {\n        this.registerSubscription(this.CHROME.domainName, this.CHROME.WINDOWS.apiName, this.CHROME.WINDOWS.ON_BOUNDS_CHANGED.methodName);\n        this.onBoundsChangedCallbacks.push(callback);\n    }\n\n    private onCreatedCallbacks: Function[] = [];\n    public onCreated(callback: (window: chrome.windows.Window) => void): void {\n        this.registerSubscription(this.CHROME.domainName, this.CHROME.WINDOWS.apiName, this.CHROME.WINDOWS.ON_CREATED.methodName);\n        this.onCreatedCallbacks.push(callback);\n    }\n\n    private onFocusChangedCallbacks: Function[] = [];\n    public onFocusChanged(callback: (windowId: number) => void): void {\n        this.registerSubscription(this.CHROME.domainName, this.CHROME.WINDOWS.apiName, this.CHROME.WINDOWS.ON_FOCUS_CHANGED.methodName);\n        this.onFocusChangedCallbacks.push(callback);\n    }\n\n    private onRemovedCallbacks: Function[] = [];\n    public onRemoved(callback: (windowId: number) => void): void {\n        this.registerSubscription(this.CHROME.domainName, this.CHROME.WINDOWS.apiName, this.CHROME.WINDOWS.ON_REMOVED.methodName);\n        this.onRemovedCallbacks.push(callback);\n    }\n\n    /**\n     *  @internal\n     */\n    public onEventFromSandbox(sandboxEvent: SandboxEvent): void {\n        if (sandboxEvent.domain === this.CHROME.domainName && sandboxEvent.api === this.CHROME.WINDOWS.apiName) {\n            switch (sandboxEvent.method) {\n                case this.CHROME.WINDOWS.GET_ALL.methodName:\n                    const foundPromise = this.pendingRequests.find(request => request.sandboxEvent.id === sandboxEvent.id);\n                    const fountPromiseIndex = this.pendingRequests.findIndex(request => request.sandboxEvent.id === sandboxEvent.id);\n                    if (foundPromise) {\n                        foundPromise.resolvePromise(sandboxEvent.data);\n                        this.pendingRequests.splice(fountPromiseIndex, 1);\n                    }\n                    break;\n                case this.CHROME.WINDOWS.ON_BOUNDS_CHANGED.methodName:\n                    this.onBoundsChangedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.CHROME.WINDOWS.ON_CREATED.methodName:\n                    this.onCreatedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.CHROME.WINDOWS.ON_FOCUS_CHANGED.methodName:\n                    this.onFocusChangedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                case this.CHROME.WINDOWS.ON_BOUNDS_CHANGED.methodName:\n                    this.onRemovedCallbacks.forEach(callback => callback(sandboxEvent.data));\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n}","import SandboxEvent from \"../../model/sandbox-event\";\nimport Tabs from \"./tabs/tabs\";\nimport Windows from \"./windows/windows\";\n\nexport default class Chrome {\n\n    public windows = new Windows();\n    public tabs = new Tabs();\n\n    /**\n     *  @internal\n     */\n    constructor() { }\n\n    /**\n     *  @internal\n     */\n    onEventFromSandbox(sandboxEvent: SandboxEvent): void {\n        this.windows.onEventFromSandbox(sandboxEvent);\n    }\n}","import SandboxEvent from \"../../../model/sandbox-event\";\nimport SandboxEventDispatcher from \"../../../model/sandbox-event-dispatcher\";\nimport SandboxEventPromise from \"../../../model/sandbox-event-promise\";\nimport Api from \"../../api\";\n\nexport default class Page extends SandboxEventDispatcher {\n\n    private SANDBOX = {\n        domainName: 'sandbox',\n        PAGE: {\n            apiName: 'page',\n            JAIL: {\n                methodName: 'jail'\n            },\n            READY: {\n                methodName: 'ready'\n            }\n        }\n    }\n\n    private pendingRequests: SandboxEventPromise[] = [];\n\n    public ready(): Promise<boolean> {\n        const sandboxEvent = new SandboxEvent(this.SANDBOX.domainName, this.SANDBOX.PAGE.apiName, this.SANDBOX.PAGE.JAIL.methodName);\n        const sandboxEventPromise = new SandboxEventPromise(sandboxEvent);\n        this.pendingRequests.push(sandboxEventPromise);\n        this.sendSandboxEvent(sandboxEvent);\n        this.registerSandboxEventsListener();\n        return sandboxEventPromise.createPromise();\n    }\n\n    /**\n     *  @internal\n     */\n    public onEventFromSandbox(sandboxEvent: SandboxEvent): void {\n        if (sandboxEvent.domain === this.SANDBOX.domainName && sandboxEvent.api === this.SANDBOX.PAGE.apiName) {\n            switch (sandboxEvent.method) {\n                case this.SANDBOX.PAGE.READY.methodName:\n                    const foundPromise = this.pendingRequests.find(request => request.sandboxEvent.id === sandboxEvent.id);\n                    const fountPromiseIndex = this.pendingRequests.findIndex(request => request.sandboxEvent.id === sandboxEvent.id);\n                    if (foundPromise) {\n                        foundPromise.resolvePromise(true);\n                        this.pendingRequests.splice(fountPromiseIndex, 1);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    /**\n     *  @internal\n     */\n    private registerSandboxEventsListener(): void {\n        window.addEventListener('message', message => {\n            Api.onEventFromSandbox(message.data as SandboxEvent);\n        }, false);\n    }\n\n}","import SandboxEvent from \"../../model/sandbox-event\";\nimport Page from \"./page/page\";\n\nexport default class Sandbox {\n\n    public page = new Page();\n\n    /**\n     *  @internal\n     */\n    constructor() { }\n\n    /**\n     *  @internal\n     */\n    onEventFromSandbox(sandboxEvent: SandboxEvent): void {\n        this.page.onEventFromSandbox(sandboxEvent);\n    }\n}","import SandboxEvent from \"../model/sandbox-event\";\nimport Chrome from \"./chrome/chrome\";\nimport Sandbox from \"./sandbox/sandbox\";\n\nexport default class TJ {\n    static chrome = new Chrome();\n    static sandbox = new Sandbox();\n\n    /**\n     *  @internal\n     */\n    constructor() { }\n\n    /**\n     *  @internal\n     */\n    static onEventFromSandbox(sandboxEvent: SandboxEvent): void {\n        this.sandbox.onEventFromSandbox(sandboxEvent);\n        this.chrome.onEventFromSandbox(sandboxEvent);\n    }\n}","import Api from \"./api/api\";\n\nexport const TJ = Api;"],"names":["random","bytes","crypto","getRandomValues","Uint8Array","SandboxEvent","domain","api","method","data","id","this","generateId","alphabet","size","getRandom","mask","Math","log","length","LN2","step","j","customRandom","nanoid","SandboxEventDispatcher","PARENT_TARGET_ORIGIN","REGISTER_SUBSCRIPTION_DOMAIN","REGISTER_SUBSCRIPTION_API","REGISTER_SUBSCRIPTION_METHOD","sendSandboxEvent","sandboxEvent","window","parent","postMessage","registerSubscription","SandboxEventPromise","resolve","reject","createPromise","Promise","_this","resolvePromise","rejectPromise","reason","Tabs","CHROME","domainName","TABS","apiName","QUERY","methodName","ON_ACTIVATED","ON_ATTACHED","ON_CREATED","ON_DETACHED","ON_HIGHLIGHT_CHANGED","ON_HIGHLIGHTED","ON_MOVED","ON_REMOVED","ON_REPLACED","ON_SELECTION_CHANGED","ON_UPDATED","ON_ZOOM_CHANGE","pendingRequests","onActivatedCallbacks","onAttachedCallbacks","onCreatedCallbacks","onDetachedCallbacks","onHighlightedCallbacks","onMovedCallbacks","onRemovedCallbacks","onReplacedCallbacks","onUpdatedCallbacks","onZoomChangeCallbacks","query","sandboxEventPromise","push","onActivated","callback","onAttached","onCreated","onDetached","onHighlighted","onMoved","onRemoved","onReplaced","onUpdated","onZoomChange","onEventFromSandbox","foundPromise","find","request","fountPromiseIndex","findIndex","splice","forEach","Windows","WINDOWS","GET_ALL","ON_BOUNDS_CHANGED","ON_FOCUS_CHANGED","onBoundsChangedCallbacks","onFocusChangedCallbacks","getAll","onBoundsChanged","onFocusChanged","Chrome","windows","tabs","Page","SANDBOX","PAGE","JAIL","READY","ready","registerSandboxEventsListener","addEventListener","message","Api","Sandbox","page","TJ","sandbox","chrome"],"mappings":"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"}